@page "/generate-image"
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer
@using VideoGenerationApp.Services
@using VideoGenerationApp.Dto
@inject GenerationQueueService QueueService
@inject OllamaOutputState OutputState
@inject ILogger<GenerateImage> Logger
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Generate Image - Video Generation App</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-4">
                <i class="bi bi-image me-2"></i>
                Generate Image
            </h3>
            
            <!-- Information Section -->
            <div class="alert alert-info mb-4">
                <h6 class="alert-heading"><i class="bi bi-info-circle me-2"></i>About Image Generation</h6>
                <p class="mb-2">This page uses Stable Diffusion to generate images from text descriptions. Adjust the parameters below to control the quality, style, and characteristics of your generated images.</p>
                <small>
                    <strong>Quick Tips:</strong> Higher steps = better quality but slower. CFG Scale controls prompt adherence. Use seed for reproducible results.
                    <a href="https://stable-diffusion-art.com/know-these-important-parameters-for-stunning-ai-images/" target="_blank" rel="noopener noreferrer" class="alert-link ms-2">
                        <i class="bi bi-book me-1"></i>Learn more about parameters
                    </a>
                </small>
            </div>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <strong>Error:</strong> @errorMessage
        </div>
    }

    <div class="row">
        <div class="col-lg-8">
            <!-- Image Configuration Section -->
            <div class="parameter-section">
                <h5><i class="bi bi-image me-2"></i>Image Generation Configuration</h5>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="modelSelect">
                                Image Model
                                <i class="bi bi-question-circle tooltip-icon" title="Select the image generation model to use. Different models produce different artistic styles."></i>
                            </label>
                            <select id="modelSelect" class="form-select" @bind="imageConfig.CheckpointName" disabled="@isLoadingModels">
                                @if (isLoadingModels)
                                {
                                    <option disabled selected>Loading models...</option>
                                }
                                else if (availableModels == null || !availableModels.Any())
                                {
                                    <option disabled selected>No image models found</option>
                                }
                                else
                                {
                                    @foreach (var model in availableModels)
                                    {
                                        <option value="@model">@model</option>
                                    }
                                }
                            </select>
                            @if (availableModels != null && availableModels.Any())
                            {
                                <small class="form-text text-muted">@availableModels.Count model(s) available</small>
                            }
                        </div>
                        
                        <div class="form-group">
                            <label for="positivePrompt">
                                Positive Prompt
                                <i class="bi bi-question-circle tooltip-icon" title="Describe what you want in the image. Be specific and use descriptive adjectives. Include quality tags like 'high quality', 'detailed', '8k' for better results."></i>
                            </label>
                            <textarea id="positivePrompt" class="form-control" rows="4" @bind="imageConfig.PositivePrompt" 
                                placeholder="e.g., beautiful landscape, mountains, sunset, high quality, detailed"></textarea>
                            <small class="form-text text-muted">Describe desired elements, style, quality, and details you want in the image.</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="negativePrompt">
                                Negative Prompt
                                <i class="bi bi-question-circle tooltip-icon" title="Describe what you DON'T want in the image. Common exclusions: ugly, blurry, low quality, distorted, deformed, bad anatomy, watermark."></i>
                            </label>
                            <textarea id="negativePrompt" class="form-control" rows="3" @bind="imageConfig.NegativePrompt" 
                                placeholder="e.g., ugly, blurry, low quality, distorted"></textarea>
                            <small class="form-text text-muted">List unwanted elements, artifacts, or quality issues to avoid.</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="width">
                                Width
                                <i class="bi bi-question-circle tooltip-icon" title="Image width in pixels. Must be divisible by 64. Larger sizes need more memory and time. Standard: 512-1024. High-res: 1536-2048."></i>
                            </label>
                            <input id="width" type="number" class="form-control" step="64" min="512" max="2048" 
                                @bind="imageConfig.Width" />
                            <small class="form-text text-muted">512-2048 pixels, in steps of 64.</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="height">
                                Height
                                <i class="bi bi-question-circle tooltip-icon" title="Image height in pixels. Must be divisible by 64. Larger sizes need more memory and time. Standard: 512-1024. High-res: 1536-2048."></i>
                            </label>
                            <input id="height" type="number" class="form-control" step="64" min="512" max="2048" 
                                @bind="imageConfig.Height" />
                            <small class="form-text text-muted">512-2048 pixels, in steps of 64.</small>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="steps">
                                Generation Steps
                                <i class="bi bi-question-circle tooltip-icon" title="Number of denoising iterations. More steps = better quality and detail, but slower generation. Recommended: 20-50 for quality, 15-25 for speed."></i>
                            </label>
                            <input id="steps" type="number" class="form-control" min="1" max="150" 
                                @bind="imageConfig.Steps" />
                            <small class="form-text text-muted">Higher values improve quality but increase generation time. Default: 20.</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="cfgScale">
                                CFG Scale (Classifier Free Guidance)
                                <i class="bi bi-question-circle tooltip-icon" title="Controls how strictly the AI follows your prompt. Lower (1-6) = more creative/varied. Higher (8-15) = stricter prompt adherence. Very high (>20) may reduce quality."></i>
                            </label>
                            <input id="cfgScale" type="number" class="form-control" step="0.5" min="1" max="30" 
                                @bind="imageConfig.CFGScale" />
                            <small class="form-text text-muted">Controls prompt adherence. Range: 1-30. Recommended: 7-12. Default: 7.</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="seed">
                                Seed
                                <i class="bi bi-question-circle tooltip-icon" title="Random seed for reproducibility. Use -1 for random results each time. Use a specific number to reproduce the same image with identical settings."></i>
                            </label>
                            <input id="seed" type="number" class="form-control" 
                                @bind="imageConfig.Seed" />
                            <small class="form-text text-muted">Set to -1 for random, or use a specific number to reproduce results.</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="sampler">
                                Sampler
                                <i class="bi bi-question-circle tooltip-icon" title="Sampling algorithm affects image generation style and quality. Euler: Fast, good for most uses. DPM++: High quality, slower. Ancestral variants: More random/creative."></i>
                            </label>
                            <select id="sampler" class="form-control" @bind="imageConfig.SamplerName">
                                <option value="euler">Euler</option>
                                <option value="euler_ancestral">Euler Ancestral</option>
                                <option value="dpm_2">DPM 2</option>
                                <option value="dpm_2_ancestral">DPM 2 Ancestral</option>
                                <option value="dpmpp_2m">DPM++ 2M</option>
                                <option value="dpmpp_sde">DPM++ SDE</option>
                            </select>
                            <small class="form-text text-muted">Different algorithms produce different styles. Euler is a good default choice.</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="d-flex gap-2 mb-4">
                <button class="btn btn-primary" @onclick="QueueImageGeneration" disabled="@isGenerating">
                    <i class="bi bi-play-fill me-2"></i>
                    @if (isGenerating)
                    {
                        <span>Generating...</span>
                    }
                    else
                    {
                        <span>Generate Image</span>
                    }
                </button>
                <button class="btn btn-outline-secondary" @onclick="ResetParameters">
                    <i class="bi bi-arrow-counterclockwise me-2"></i>Reset to Defaults
                </button>
            </div>

            <!-- Video Scene Content (if available from Ollama) -->
            @if (OutputState.ParsedOutput != null)
            {
                <div class="parameter-section">
                    <h5><i class="bi bi-file-text me-2"></i>Ollama Scene Reference</h5>
                    <div class="card">
                        <div class="card-body">
                            <p><strong>Visual Description:</strong> @OutputState.ParsedOutput.visual_description</p>
                            <p><strong>Narrative:</strong> @OutputState.ParsedOutput.narrative</p>
                            <p><strong>Mood:</strong> @OutputState.ParsedOutput.tone (@OutputState.ParsedOutput.emotion)</p>
                            <button class="btn btn-sm btn-outline-primary" @onclick="UseOllamaPrompt">
                                <i class="bi bi-arrow-down me-1"></i>Use Visual Description as Prompt
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Preview Section -->
        <div class="col-lg-4">
            <div class="parameter-section">
                <h5><i class="bi bi-eye me-2"></i>Preview</h5>
                <div class="card">
                    <div class="card-body text-center">
                        @if (!string.IsNullOrEmpty(lastGeneratedImagePath))
                        {
                            <p class="text-muted mb-2">Last Generated Image:</p>
                            <img src="@lastGeneratedImagePath" alt="Last Generated Image" style="max-width: 100%; height: auto; border-radius: 8px;" />
                        }
                        else
                        {
                            <p class="text-muted">Generated image will appear here after generation completes</p>
                            <small>View in Generation Queue for status updates</small>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ImageWorkflowConfig imageConfig = new();
    private string? errorMessage;
    private bool isGenerating;
    private bool isLoadingModels;
    private string? lastGeneratedImagePath;
    private List<string> availableModels = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        // Initialize with Ollama visual description if available
        if (OutputState.ParsedOutput != null && !string.IsNullOrWhiteSpace(OutputState.ParsedOutput.visual_description))
        {
            imageConfig.PositivePrompt = OutputState.ParsedOutput.visual_description;
        }

        // Load the last generated image
        await LoadLastGeneratedImage();
        
        // Load available models
        await LoadAvailableModels();
    }

    private async Task LoadAvailableModels()
    {
        try
        {
            isLoadingModels = true;
            StateHasChanged();
            
            Logger.LogInformation("Loading available image models from ComfyUI via QueueService");
            
            // Get models from the queue service which has access to ComfyUI services
            availableModels = await QueueService.GetImageModelsAsync();
            
            // If current checkpoint is not in the list and list is not empty, select the first one
            if (availableModels.Any() && !availableModels.Contains(imageConfig.CheckpointName))
            {
                imageConfig.CheckpointName = availableModels[0];
                Logger.LogInformation("Selected default image model: {Model}", imageConfig.CheckpointName);
            }
            
            Logger.LogInformation("Loaded {Count} image models", availableModels.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available models");
            // Continue with default model if loading fails
        }
        finally
        {
            isLoadingModels = false;
            StateHasChanged();
        }
    }

    private async Task LoadLastGeneratedImage()
    {
        var allTasks = await QueueService.GetAllTasksAsync();
        var lastImageTask = allTasks
            .Where(t => t.Type == GenerationType.Image && 
                       t.Status == GenerationStatus.Completed && 
                       !string.IsNullOrEmpty(t.GeneratedFilePath))
            .OrderByDescending(t => t.CompletedAt)
            .FirstOrDefault();

        lastGeneratedImagePath = lastImageTask?.GeneratedFilePath;
    }

    private void UseOllamaPrompt()
    {
        if (OutputState.ParsedOutput != null)
        {
            imageConfig.PositivePrompt = OutputState.ParsedOutput.visual_description ?? "";
            StateHasChanged();
        }
    }

    private void ResetParameters()
    {
        imageConfig = new ImageWorkflowConfig();
        StateHasChanged();
    }

    private async Task QueueImageGeneration()
    {
        isGenerating = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Queueing image generation: {Prompt}", imageConfig.PositivePrompt);

            // Generate a user-friendly name from the prompt
            var taskName = !string.IsNullOrWhiteSpace(imageConfig.PositivePrompt) && imageConfig.PositivePrompt.Length > 10
                ? imageConfig.PositivePrompt.Substring(0, Math.Min(50, imageConfig.PositivePrompt.Length))
                : "Image Generation";

            if (taskName.Length > 80)
                taskName = taskName.Substring(0, 77) + "...";

            // Queue the generation
            var taskId = await QueueService.QueueImageGenerationAsync(taskName, imageConfig);

            // Show success message
            await JSRuntime.InvokeVoidAsync("alert",
                $"Image generation queued successfully! Task ID: {taskId}\n\nYou can monitor progress in the Generation Queue page.");
            
            // Reload the last generated image (will update once completed)
            await LoadLastGeneratedImage();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error queueing image generation");
            errorMessage = $"Failed to queue image generation: {ex.Message}";
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}
